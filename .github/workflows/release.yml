name: iOS Build and Release

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "FileBrowserClient/Info.plist"

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode.app

      - name: Build app
        run: |
          xcodebuild -project FileBrowserClient.xcodeproj \
            -scheme FileBrowserClient \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.4' \
            clean build
        working-directory: FileBrowserClient

      - name: Get client version and build from Info.plist
        id: get_version
        run: |
          SHORT_VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" Info.plist)
          BUILD_VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" Info.plist)
          echo "Client Version: $SHORT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "Build Version: $BUILD_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "project_version=$SHORT_VERSION" >> $GITHUB_ENV
        working-directory: FileBrowserClient

      - name: Check GH Tag
        run: |
          url="https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.project_version }}"
          response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GIT_TOKEN }}" "$url")
          if [ "$response" -eq 200 ]; then
            echo "Release tag v${{ env.project_version }} already exists."
            echo "release_exists=true" >> $GITHUB_ENV
          else
            echo "Release tag v${{ env.project_version }} does not exist."
            echo "release_exists=false" >> $GITHUB_ENV
          fi

      - name: Get Release Notes
        if: env.release_exists == 'false'
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git fetch --prune --unshallow
          git fetch --tags
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "::notice title=Previous Release::${PREV_TAG}"
          echo "::notice title=Current Release::v${{ env.project_version }}"
          repository="${{ github.server_url }}/${{ github.repository }}"
          git log "${PREV_TAG}..HEAD" --pretty=format:"- [%h](${repository}/commit/%H) %s" --no-merges > release_notes.txt
          cat release_notes.txt

      - name: Create Release
        if: env.release_exists == 'false'
        run: |
          gh release create "v${{ env.project_version }}" \
            --title "v${{ env.project_version }}" \
            --notes-file release_notes.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

      - name: Update Release Notes
        if: env.release_exists == 'false'
        uses: thevickypedia/update-release-notes@v2
        with:
          git_token: ${{ secrets.GIT_TOKEN }}
          commit_message: "chore: Update release notes for v${{ env.project_version }}"
          filename: release_notes.md
